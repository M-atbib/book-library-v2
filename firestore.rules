rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User document rules
    match /users/{userId} {
      // Allow read/write if the user is accessing their own document
      allow read, update: if isSignedIn() && isSameUser(userId);
      
      // Allow create only if the user is valid
      allow create: if isValidUser(userId);

      // Users can only manage their saved books
      match /savedBooks/{savedBookId} {
        allow read, delete: if isSignedIn() && isSameUser(userId);
        allow create: if isSignedIn() && isSameUser(userId) && isValidSavedBook();
      }
    }
    
    // Books collection rules
    match /books/{bookId} {
      // Only allow public reading of published books
      allow read: if isSignedIn();
    
      // Only authenticated users can create books
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid && isValidBook();
      
      // Authors can update their own books' information
      // Readers can only update avgRating and ratingCount fields
      allow update: if isSignedIn() && (
        (isAuthor() && resource.data.authorId == request.auth.uid) || 
        (isReader() && onlyRatingFieldsChanged())
      );
      
      allow delete: if isSignedIn() && isAuthor() && resource.data.authorId == request.auth.uid;
      
      // Rating subcollection - readers can rate books
      match /ratings/{ratingId} { 
        allow read: if isSignedIn();
        
        // Users can only create or update their own ratings
        allow create, update: if isSignedIn() && isReader() && request.resource.data.userId == request.auth.uid && isValidRating();
        
        // Users can only delete their own ratings
        allow delete: if isSignedIn() && isReader() && resource.data.userId == request.auth.uid;
      }
    }
    
    match /{document=**}/savedBooks/{savedBook} {
      allow read, write: if isSignedIn() ;
    }
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isSameUser(userId) {
      return request.auth.uid == userId;
    }

    function isValidUser(userId) {
      return isSignedIn() 
        && isSameUser(userId)
        && request.resource.data.keys().hasAll(['displayName', 'email'])
        && request.resource.data.displayName is string
        && request.resource.data.email is string
    }
    
    function isAuthor() {
      return request.auth.token.role == 'author';
    }

    function isReader() {
      return request.auth.token.role == 'reader';
    }
    
    function onlyRatingFieldsChanged() {
      let allowedFields = ['avgRating', 'ratingCount', 'updatedAt'];
      let changedFields = request.resource.data.diff(resource.data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }

    function isValidSavedBook() {
      return request.resource.data.keys().hasAll(['title', 'authorName', 'coverUrl', 'genre', 'avgRating', 'tags']) &&
            request.resource.data.title is string &&
            request.resource.data.authorName is string &&
            request.resource.data.coverUrl is string &&
            request.resource.data.genre is string &&
            request.resource.data.avgRating is number &&
            request.resource.data.tags is list;
    }

    function isValidBook() {
      let book = request.resource.data;
      return book.keys().hasAll([
        'title', 'authorName', 'authorId', 'coverUrl', 
        'genre', 'tags', 'publishedDate', 'description', 'pages', 'avgRating'
      ]) &&
             book.title is string && book.title.size() > 0 &&
             book.authorName is string && book.authorName.size() > 0 &&
             book.authorId is string && book.authorId.size() > 0 &&
             book.coverUrl is string &&
             book.genre is string && book.genre.size() > 0 &&
             book.tags is list &&
             book.publishedDate is timestamp &&
             book.description is string &&
             book.pages is number && book.pages > 0 &&
             book.avgRating is number;
    }
    
    function isValidRating() {
      let rating = request.resource.data;
      return rating.keys().hasAll(['userId', 'ratingValue']) &&
         rating.userId == request.auth.uid &&
         rating.ratingValue is number && 
         rating.ratingValue >= 1 && 
         rating.ratingValue <= 5;
    }
  }
}